--------------------------------------------------- Creating a new database for our Project in snowflake --------------------------------------------------------------

CREATE DATABASE RETAILS;

--------------------------------------------------- Now changing working data Base to newly created one ---------------------------------------------------------------

USE RETAILS ; 


USE SCHEMA PUBLIC ;


--------------------------------------------------- Creating Tables for our data that will be loaded from AWS S3 bucket -----------------------------------------------

CREATE OR REPLACE TABLE demographic_Raw
(AGE_DESC CHAR(20),
MARITAL_STATUS_CODE CHAR(5),
INCOME_DESC VARCHAR(40),
HOMEOWNER_DESC VARCHAR(40),
HH_COMP_DESC VARCHAR(50),
HOUSEHOLD_SIZE_DESC VARCHAR(50),
KID_CATEGORY_DESC VARCHAR(40),
household_key INT PRIMARY KEY
);


CREATE OR REPLACE TABLE CAMPAIGN_DESC_RAW
(DESCRIPTION CHAR(10) ,	
CAMPAIGN	INT ,
START_DAY	INT,
END_DAY INT,
PRIMARY KEY (DESCRIPTION),
UNIQUE (CAMPAIGN)
);


CREATE OR REPLACE TABLE CAMPAIGN_RAW
(DESCRIPTION	CHAR(10) ,
household_key	INT,
CAMPAIGN INT,
FOREIGN KEY (DESCRIPTION) references CAMPAIGN_DESC_RAW(DESCRIPTION) ,
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN) ,
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);


CREATE OR REPLACE TABLE PRODUCT_RAW
(PRODUCT_ID	INT PRIMARY KEY,
MANUFACTURER 	INT,
DEPARTMENT	VARCHAR(50),
BRAND	VARCHAR(30),
COMMODITY_DESC	VARCHAR(65),
SUB_COMMODITY_DESC VARCHAR(65)	,
CURR_SIZE_OF_PRODUCT VARCHAR(15)
);


CREATE OR REPLACE TABLE COUPON_RAW
(COUPON_UPC	INT,
PRODUCT_ID	INT,
CAMPAIGN INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE OR REPLACE TABLE COUPON_REDEMPT_RAW
(household_key	INT,
DAY	INT,
COUPON_UPC	INT,
CAMPAIGN INT,
FOREIGN KEY (household_key) references demographic_RAW(household_key),
FOREIGN KEY (CAMPAIGN) references CAMPAIGN_DESC_RAW(CAMPAIGN)
);


CREATE  TABLE TRANSACTION_RAW 
(household_key	INT,
BASKET_ID	INT,
DAY	INT,
PRODUCT_ID	INT,
QUANTITY	INT,
SALES_VALUE	FLOAT,
STORE_ID	INT,
RETAIL_DISC	FLOAT,
TRANS_TIME	INT,
WEEK_NO	INT,
COUPON_DISC	INT,
COUPON_MATCH_DISC INT,
FOREIGN KEY (PRODUCT_ID) references PRODUCT_RAW(PRODUCT_ID),
FOREIGN KEY (household_key) references demographic_RAW(household_key)
);


---------------------------------------------------------- AWS S3 integration -----------------------------------------------

CREATE OR REPLACE STORAGE INTEGRATION s3_int
TYPE = EXTERNAL_STAGE
STORAGE_PROVIDER = S3
ENABLED = TRUE
STORAGE_AWS_ROLE_ARN = 'arn:aws:iam::225411167237:role/retailrole'		------- After creation of role, add arn here .
STORAGE_ALLOWED_LOCATIONS = ('s3://retailrawomkar/'); 				------- Here provide the link of your S3 bucket

DESC integration s3_int ;

----------------------------------------------------------- File Format -----------------------------------------------------------

create or replace file format RETAIL_FF
    type = 'csv' 
    compression = 'none' 
    field_delimiter = ','
    field_optionally_enclosed_by = 'none'
    skip_header = 1 ;

----------------------------------------------------------- Stage Creation ------------------------------------------------------
CREATE OR REPLACE STAGE RETAIL
URL = 's3://retailrawomkar'
file_format = RETAIL_FF
storage_integration = s3_int ;

LIST @RETAIL ;

SHOW STAGES;

----------------------------------------------------------- CREATING SNOWPIPE THAT LOAD DATA FROM EXTERNAL STATGE INTO EXISTING TABLE -------------

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."DEMOGRAPHIC_RAW"
FROM '@RETAIL/DEMOGRAPHIC/'
FILE_FORMAT = RETAIL_FF ;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_DESC_RAW"
FROM '@RETAIL/CAMPAIGN_DESC/'
FILE_FORMAT = RETAIL_FF ;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_CAMPAIGN AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."CAMPAIGN_RAW"
FROM '@RETAIL/CAMPAIGN/'
FILE_FORMAT = RETAIL_FF ;



CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_RAW"
FROM '@RETAIL/COUPON/'
FILE_FORMAT = RETAIL_FF ;

CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."COUPON_REDEMPT_RAW"
FROM '@RETAIL/COUPON_REDEMPT/'
FILE_FORMAT = RETAIL_FF ;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_PRODUCT AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."PRODUCT_RAW"
FROM '@RETAIL/PRODUCT/'
FILE_FORMAT = RETAIL_FF ;


CREATE OR REPLACE PIPE RETAIL_SNOWPIPE_TRANSACTION AUTO_INGEST = TRUE AS
COPY INTO "RETAILS"."PUBLIC"."TRANSACTION_RAW"
FROM '@RETAIL/TRANSACTION/'
FILE_FORMAT = RETAIL_FF ;


SHOW PIPES ;            	------------------------------ CHECKING THE PIPES CREATED ABOVE


SELECT COUNT(*) FROM DEMOGRAPHIC_RAW ;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW ;
SELECT COUNT(*) FROM CAMPAIGN_RAW ;
SELECT COUNT(*) FROM COUPON_RAW ;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW ;
SELECT COUNT(*) FROM PRODUCT_RAW ;
SELECT COUNT(*) FROM TRANSACTION_RAW ;



---------------------------------------------- PIPE REFRESH ------------------------------------------------------------------
----------------------------------------------   THIS SENDS THE DATA THAT IS RECEIVED FROM THE STAGE INTO THE TABLES CREATED EARLIER   -----------------------------------------------

ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN refresh ;
ALTER PIPE RETAIL_SNOWPIPE_CAMPAIGN_DESC refresh ;
ALTER PIPE RETAIL_SNOWPIPE_COUPON refresh ;
ALTER PIPE RETAIL_SNOWPIPE_COUPON_REDEMPT refresh ;
ALTER PIPE RETAIL_SNOWPIPE_DEMOGRAPHIC refresh ;
ALTER PIPE RETAIL_SNOWPIPE_PRODUCT refresh ;
ALTER PIPE RETAIL_SNOWPIPE_TRANSACTION refresh ;



SELECT COUNT(*) FROM DEMOGRAPHIC_RAW ;
SELECT COUNT(*) FROM CAMPAIGN_DESC_RAW ;
SELECT COUNT(*) FROM CAMPAIGN_RAW ;
SELECT COUNT(*) FROM COUPON_RAW ;
SELECT COUNT(*) FROM COUPON_REDEMPT_RAW ;
SELECT COUNT(*) FROM PRODUCT_RAW ;
SELECT COUNT(*) FROM TRANSACTION_RAW ;


SELECT * FROM CAMPAIGN_DESC_NEW LIMIT 10 ;
SELECT * FROM COUPON_REDEMPT_NEW LIMIT 10 ;
SELECT * FROM TRANSACTION_NEW LIMIT 10 ;




-------------------------------------------------      KPI CREATION          ----------------------------------------

SELECT COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS FROM DEMOGRAPHIC_RAW ;


SELECT HH_COMP_DESC , COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM DEMOGRAPHIC_RAW
GROUP BY 1 ORDER BY 2 DESC ;


SELECT AGE_DESC,TOTAL_HOUSEHOLDS,ROUND(TOTAL_HOUSEHOLDS/2500 * 100,2) AS PERC_AGEWISE_HOUSEHOLDS_DISTR
FROM
(SELECT AGE_DESC,
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS
FROM demographic_RAW 
GROUP BY 1
ORDER BY 2 DESC)
GROUP BY 1,2;


SELECT MARITAL_STATUS_CODE , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_MARITAL_HOUSEHOLDS_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT INCOME_DESC , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_INCOME_HOUSEHOLDS_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;

SELECT HOMEOWNER_DESC , 
COUNT(DISTINCT HOUSEHOLD_KEY) AS TOTAL_HOUSEHOLDS,
ROUND(COUNT(DISTINCT HOUSEHOLD_KEY) / 2500 * 100 , 2) AS PERC_HOMEOWNER_DESC_DISTR
FROM demographic_RAW
GROUP BY 1
ORDER BY 2 DESC;


SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4
ORDER BY 1;


-------------------------------------------------- CREATING PROCEDURES THAT WOULD CREATE TABLE USING DATA THAT IS LOADED FROM S3 ------------------------------
CREATE OR REPLACE PROCEDURE Household_kpi()
RETURNS STRING
LANGUAGE SQL
AS
$$
 CREATE OR REPLACE TABLE Household_kpi AS (SELECT T.HOUSEHOLD_KEY,D.AGE_DESC,D.MARITAL_STATUS_CODE,D.INCOME_DESC,AVG(T.SALES_VALUE)AS AVG_AMOUNT,
AVG(T.RETAIL_DISC)AS AVG_RETAIL_DIS,AVG(T.COUPON_DISC)AS AVG_COUPON_DISC,AVG(T.COUPON_MATCH_DISC)AS AVG_COUP_MATCH_DISC
FROM TRANSACTION_NEW T
LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY =D.HOUSEHOLD_KEY
GROUP BY 1,2,3,4 ORDER BY 1);
$$;


CREATE OR REPLACE PROCEDURE Calculate_Household_KPIs()
RETURNS STRING
LANGUAGE SQL
AS
$$
BEGIN
  -- Create a temporary table to store the KPI results
  CREATE TABLE tmp_Household_KPI AS
    SELECT
      T.HOUSEHOLD_KEY,
      D.AGE_DESC,
      D.MARITAL_STATUS_CODE,
      D.INCOME_DESC,
      AVG(T.SALES_VALUE) AS AVG_AMOUNT,
      AVG(T.RETAIL_DISC) AS AVG_RETAIL_DISC,
      AVG(T.COUPON_DISC) AS AVG_COUPON_DISC,
      AVG(T.COUPON_MATCH_DISC) AS AVG_COUP_MATCH_DISC
    FROM TRANSACTION_NEW T
    LEFT OUTER JOIN demographic_RAW D ON T.HOUSEHOLD_KEY = D.HOUSEHOLD_KEY
    GROUP BY 1, 2, 3, 4;

  -- You can perform additional operations or return a message if needed
  RETURN 'Household KPIs have been calculated successfully.';
END;
$$;



SHOW PROCEDURES; 					---------------------- GETTING DETAILS OF CREATED PROCEDURES




CALL Calculate_Household_KPIs() ;			---------------------- CALLING PROCEDURE THAT WOULD CREATE TABLE REQUIRED FOR CREATING POWERBI DASHBOARD



---------------------------------------- CREATING A TASK THAT WOULD IN TURN CALL THE PROCEDURE OF CREATING THE KPI TABLE FOR POWERBI DASHBOARD ---------------------
---------------------------------------- THIS TASK CAN BE SCHEDULED ACCORDING TO OUR USE CASE USING CRONE TAB METHOD ----------------------------------------------


CREATE OR REPLACE TASK  Household_kpi_TASK
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE' 
AS CALL Household_kpi();

CREATE OR REPLACE TASK  Calculate_Household_KPIs
WAREHOUSE = COMPUTE_WH
SCHEDULE = '1 MINUTE' 
AS CALL Calculate_Household_KPIs();




SHOW TASKS; 						---------------------- GETTING DETAILS OF CREATED TASKS



--------------------------------------- CHANGING THE STATE OF THE TASK USING FOLLOWING COMMAND ---------------------------------------------------

ALTER TASK   Household_kpi_TASK RESUME;
ALTER TASK  Household_kpi_TASK SUSPEND; 


ALTER TASK   Calculate_Household_KPIs RESUME;
ALTER TASK  Calculate_Household_KPIs SUSPEND; 


